/* 
Go 설치
Go를 설치하는 이유는
Geth를 빌드하는데 필요한 언어이기 때문
Geth는 go-ethereum의 약자
Go 언어로 만들어진 이더리움 클라이언트 소프트웨어이다.

// Window 에서
// Ubuntu 환경 접속
// cmd 창에서 wsl 입력으로 접속
// 접속 종료는 exit 

권한이 필요한 명령어를 사용할 때 sudo
Go 설치
win-설치명령어///////////////////////////////////////////////
sudo apt update
sudo apt install golang
Geth를 실행하기 위해서 ㄱ
sudo apt install -y libgmp3-dev tree make build-essential
//////////////////////////////////////////////////////////
mac-설치명령어///////////////////////////////////////////////
brew install go
Geth를 실행하기 위해서 ㄱ
brew install ethereum // 버전확인 -> geth version //
//////////////////////////////////////////////////////////

Geth를 받을 클론 폴더를 만들어서 git clone을 하자
*설치
경로를 나와서 (최상위 경로로)
// cd ~
폴더이름을 Ethereum으로 만들고
// mkdir Ethereum
그 폴더 안으로 이동해서
// cd Ethereum

// git clone https://github.com/ethereum/go-ethereum

clone이 다 받아지면
// cd go-ethereum
Geth 실행하기
// make geth

빌드된 경로로 이동
// cd ./build/bin

geth 버전 확인
// geth version

geth 실행
// geth

사용할때마다 폴더 경로까지 들어가서 실행하는게 번거로우니 설정하는게 pc의 환경변수

현재 폴더의 절대 경로 확인
// pwd
/Users/allen/Ethereum/go-ethereum/build/bin

// vi ~./bash_profile
수정은 i키 눌러서 수정
esc 키로 나온후
:wq! 저장후 종료

작성 방법
// export PATH=$PATH:/Users/allen/Ethereum/go-ethereum/build/bin
환경 변수 설정
// source ~/.bash_profile
환경 변수 설정이 되었고, 확인은 다른경로에서 geth 실행해보기
(실행 되면 완료!)

///////////////////////////////////////////////
가나쉬 설치 명령어 (글로벌 설치는 관리자권한이 필요!! sudo)
sudo npm install -g ganache-cli
-----------------------------------------------
실행 명령어
npx ganache-cli
///////////////////////////////////////////////

가나쉬는 로컬에서 이더리움 블록체인 가상 네트워크를 생성할 수 있게 해줘서, 그안에서 테스트를 할 수 있도록 해준다.
가나쉬로 생성된 네트워크에서는 채굴기능이 없고, P2P기능도 없다.
블록 / 체인 / Tx와 관련된 기능만 있다.
1tx에 1개의 블록 생성
가나쉬로 트랜잭션을 발생시키면 실시간 확인이 가능해서 테스트에 용이하다.



비트코인과 이더리움의 차이
이더리움의 특징은 스마트 컨트랙트를 구현할 수 있다.
비트코인은 트랜잭션을 만들면 계정의 소유자가 다른 계정의 소유자에게 10코인을 전송한다... 같은 거래를 주로 했는데

이더리움은 스마트 컨트랙트를 사용해서 기능 구현이 가능하다.
A -> B -> C 의 물건을 구매하는 상황은
B에게 A가 상품의 금액을 받아서 C에게 받은 사실을 알려준다.
그러면 C가 상품을 A에게 주고 A가 상품을 확인하면 스마트 컨트랙트가 동작해서
B의 계정에서 C의 계정으로 코인을 보내준다.
스마트 컨트랙트는 거래에 대해 조건에 충족한 계약 형태의 거래를 가능하게 해준다.
그래서 코인을 받고 물건을 전달하는 거래뿐만 아니라 조건에 따라 특정한 코드가 실행되어
거래를 할 수 있게끔 추가 조건들을 기능으로 구현할 수 있다.
스마트 컨트랙트를 작성할때는 솔리디티를 사용해서 스마트 컨트랙트를 작성할 수 있다.

스마트 컨트랙트를 구현할 때 이더리움 EVM이라는것을 사용하고
Account, Transaction 의 내용도 조금 다르다.

EVM은?
이더리움 가상머신(Ethereum Virtual Machine)의 약자 (JAVA에서 JVM같은 개념적인 비슷한 기능)
스마트 컨트랙트를 실행할 때 분산 네트워크 환경에서 모든 노드들이 스마트 컨트랙트에 의해 특정한 결과를 얻어야할 때
솔리디티 언어로 작성한 코드를 EVM을 통해서 실행 시키게 한다.

1. 솔리디티로 컨트랙트 코드 작성
2. 바이트 코드로 컴파일
3. EVM에서 컴파일된 바이트 코드 실행

이더리움 스마트 컨트랙트라는 프로그램을 실행 할 수 있는 플랫폼으로 기능할 수 있는 핵심은 EVM이라는 가상 컴퓨터가 있기 때문이다.
우리가 만든 규칙에 따라서 스마트 컨트랙트 코드를 실행하고 그 결과를 업데이트 해준다.

//
EVM은 _가상머신_이고 정해진 스마트 컨트랙트 규칙에 따라서 코드(계약)를 실행하고 그 결과로 변한 상태를 업데이트 해준다.

Account
이더리움 네트워크에는 EOA, CA 라는 두 종류의 계정이 존재 하고

EOA는 외부 소유 계정(Externally Owned Account)
개인키로 제어되는 계정으로 코드를 저장하지 않는다.
스마트 컨트랙트에 대한 접근을 제어한다.
EOA로 트랜잭션을 시작할 수 있다.
EOA는 다른 EOA 또는 CA에 메시지를 보낼 수 있으며, 이 동작은 개인키를 사용해서 트랜잭션을 만들고 서명하고
두개의 EOA사이에서 발생하는 메시지는 단순히 ETH만을 전송한다.
EOA에서 CA에 보내는 메시지는 CA에 저장된 코드를 활성화 시킨다.
(명령은 EOA가 전송한 트랜잭션부터 시작된다고 보면된다.)

CA는 계약 계정(Contract Account)
스마트 컨트랙트의 로직에서 제어를 하고 스마트 컨트랙트 코드(코드의 해시)를 저장할 수 있다.
개인키가 없고 스스로 트랜잭션을 시작할 수 없다.
외부에서 트랜잭션에 대한 응답을 통해 트랜잭션을 실행 할 수 있다.
CA는 EOA와 다른점은 개인키를 가지고 있지 않고 스스로 트랜잭션을 생성할 수도 없다.
CA는 다른 CA 또는 EOA로 부터 받은 트랜잭션에 대한 응답으로만 트랜잭션을 실행할 수 있다.

Transaction
이더리움 네트워크에서 트랜잭션은 EOA에 의해서 서명되고
이 트랜잭션의 속성은
from: 보내는 계정
to: 받는 계정
nonce: 보내는 계정이 발생시킨 총 트랜잭션 횟수
value: 보내는 금액
gasLimit: 트랜잭션이 사용할 수 있는 gas의 최대치
gasPrice: 보내는 사람이 지불할 gas의 가격
data: 트랜잭션에 담을 데이터

비트코인 네트워크와 다른점은, 이더리움 네트워크에서는 가스비(gas fee)라는 개념이 있고
가스는 이더리움 네트워크에서 트랜잭션을 생성할 때 보내는 사람이 부담하는 수수료의 개념이다.

Web3 라이브러리를 사용하면 노드간의 통신을 할 때

RPC
RPC라는 개념이 나온 이유는
분산 네트워크를 프로그래밍으로 쉽게 하기위해.
(분산 네트워크를 컴퓨터 환경에서 프로그래밍을 쉽게 할 수 있는 방법을 찾다가...)

일반적으로 통신 패턴은
서버를 켜고, 클라이언트에서 서버에 데이터나 행동을 요청보내고, 서버에서 그 데이터를 받고 요청받은 응답을 반환해주고,
클라이언트는 서버로부터 응답값을 받아서 본인의 요청을 결과로 받을 수 있다. (HTTP, Socket 등등)

RPC는 원격 프로시저를 호출해 별도의 원격 제어를 위한 코딩없이 다른 주소 공간에서 함수나 프로시저를 실행할 수 있게하는 프로세스간의 통신기술.
원격 프로시저를 호출하면 프로그래머가 함수 실행 프로그램의 로컬 위치에 있든 원격 위치에 있든 동일한 코드를 이용할 수 있다.

함수는 input에 대한 output의 발생을 목적으로 하는데,
프로시저는 결과보다는 명령 단위가 수행하는 절차를 목적으로 한다.

RPC 참고 링크 // https://velog.io/@jakeseo_me/RPC%EB%9E%80 //

*/
