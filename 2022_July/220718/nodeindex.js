/* 대망의 node.js !!
node.js가 무엇인가!!
자바 스크립트를 써서 데이터베이스에 연결해 서버로 요청을 보내는 기능을 구현할 수 있다.
node.js는 크롬 V8 자바스크립트 엔진으로 빌드된 자바스크립트 런타임이다.

node.js를 웹서버 자체로 생각하는건 잘못된 것이다.
아파치 같은 웹서버중 하나가 아니다.
자바스크립트로 브라우저가 아니라 서버에서 자바스크립트가 동작하도록 도와주는 !런타임 플랫폼!이라고 생각하면 된다.
**서버가 아니라 서버js를 짤수 있는 아이

2009년에 라이언 달 이라는 개발자가 node.js를 처음 만들었고 지금까지도 업데이트가 잘 되고 있다.
node.js를 설치해서 실행한다고 웹서버가 실행되는게 아니라 node.js에 있는 라이브러리를
!!npm(node package manager)!!를 이용해서 설치해서 사용할 수 있다.

node.js의 특징 3가지
1. 자바스크립트로 백엔드 서버 로직을 개발할 수 있다. (장점)
2. 구글에서 개발한 js엔진을 쓰기 때문에 속도가 빠르다. (인터프린터 방식)
3. 논 블로킹 방식 node.js의 모든 API는 비동기적으로 작동하며 호출 후 다른 API를 바로 불러올 수 있다.
    한번 불러왔던 API를 요청하면 이벤트 루프가 확인해서 동작

node.js가 왜 생겼는가.
방대한 오픈소스 생태계를 구축하기 위해서
npm(node package manager)를 사용해서 패키지들을 다운받을 수 있고,
리액트 익스프레스 코아 이런 익숙한 것들의 패키지들은 다 npm에 등록되어 있다.
특수한걸 만드는 사람이 아닌이상 거의다 기능이 이미 나와 있는것들이 많다.
잘쓰면 빠르고 좋은 효과를 볼 수 있다.

모듈 (작은 기능들의 집합)
패키지는 클래스의 묶음, 패키지의 모임이 모듈
기능들의 모임, 파일의 모임

require를 많이 사용하게 될텐데...
node.js의 require란 무엇인가?

*/



// node.js에서 모듈을 가져오는 방법. require함수를 사용해서 가져온다.
// require(경로나 이름)
const http = require('http');
//const { default: nodeTest } = require('node:test');

// http 객체 안의 createServer함수를 사용해서 서버를 만듬.
// http.createServer를 변수에 담으면 서버가 되는 부분을 반환 받을 수 있다.
const server = http.createServer((req,res) => {
    // req 요청값
    // 404, 500 이런 오류들...
    req.statusCode = 200; // http에서 ok를 나타내는 번호가 200번이라서
    // 100번대 : 정보응답
    // 200번대 : 성공응답
    // 300번대 : 리다이렉션 메시지, 요청한 url이 변경됐을때
    // 400번대 : 클라이언트상의 오류, 클라이언트에 오류가 있을때
    // 500번대 : 서버 오류 응답, 서버에 오류가 있을때

    // write() : 문자를 써서 보내주는 함수
    res.write('123');

    // end() : 끝맺음 매개변수 문자를 보내주면서 끝
    res.end('456');
});

const PORT = 3000;

// 서버가 되는 server에 함수를 사용한다. 서버를 열어줌
// listen()로 서버를 열어줌
server.listen(PORT,()=>{
    console.log("port : ", PORT);
});

// server객체의 준비가 되면 listen()로 해당 포트에 서버를 대기시킨다.
// 서버를 대기시키는 이유는 클라이언트에서 요청이 오면 서버가 받아서 처리할 수 있다.
// 여기 들어가는 매개변수는 (포트번호, 호스트이름, 백 로그, 콜백 함수) 이렇게 있다.



// node.js 실행하는법
// node "자바스크립트 파일의 경로"


// node.js 코딩을 해볼수 있는곳. 테스트용 코드들
// 코드 샌드박스, glitch 등등...
// 노드 서버를 바로 볼 수 있고, 코딩도 바로바로 테스트 해볼 수 있다.

/* glitch 장점
https 검증도 되어있는 웹서버를 테스트로 사용해 볼 수 있다.
node프로젝트 생성 버튼을 누르고
server.js 에 서버 로직을 작성한 후 바로
preview 버튼을 눌러서 위에 버튼은 바로 그 창에서 화면을 볼 수 있고
테스트용 링크가 필요하면 preview 버튼을 눌렀을때 preview in a new window 버튼을
클라이언트 요청을 보내볼 웹서버 주소로 접속이 된다.
그래서 테스트에 용이하게 사용할 수 있다.
*/

/* node.js 버전 관리
버전관리 하는 방법. 서버노드는 최신인데 로컬노드가 구버전이면
최신버전은 기능이 있는데, 구버전에는 없을 경우에 기능이 실행되지 않는다.
이런 버전 문제가 생겼을 경우 해결해주는 아이. 물론 우리가 조작을 해줘야한다.
삭제했다가 재설치 할수도 있지만 번거로우니.
won-- nvm (node version manager)
맥-- tj/n (node version manager)

맥에서는~
sudo npm install -g n  >> nvm 설치
sudo n 16.15.1  >> 노드 버전을 "16.15.1" 로 변경
n ls  >> 설치했던 노드 버전들 확인
*/
